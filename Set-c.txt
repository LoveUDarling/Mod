<Window x:Class="MainWindow.AddWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MainWindow"
        mc:Ignorable="d"
        Title="AddWindow" Height="450" Width="800" Loaded="Window_Loaded">
    <Grid>
        <Label x:Name="lbl_Pname" Content="Product Name" HorizontalAlignment="Left" Margin="39,38,0,0" VerticalAlignment="Top" FontSize="14" Width="149"/>
        <Label x:Name="lbl_Desc" Content="Description" HorizontalAlignment="Left" Margin="39,84,0,0" VerticalAlignment="Top" FontSize="14" Width="149"/>
        <Label x:Name="lbl_price" Content="Price" HorizontalAlignment="Left" Margin="39,128,0,0" VerticalAlignment="Top" FontSize="14" Width="149"/>
        <TextBox x:Name="txt_Pname" HorizontalAlignment="Left" Height="23" Margin="227,38,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" Width="183" FontSize="14"/>
        <TextBox x:Name="txt_Desc" HorizontalAlignment="Left" Height="23" Margin="227,84,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" Width="183" FontSize="14"/>
        <TextBox x:Name="txt_Price" HorizontalAlignment="Left" Height="23" Margin="227,134,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" Width="183" FontSize="14" RenderTransformOrigin="0.638,0.326"/>
        <Button x:Name="btn_Insert" Content="Insert Product" HorizontalAlignment="Left" Margin="227,189,0,0" VerticalAlignment="Top" Width="139" FontSize="14" Click="Btn_Insert_Click"/>
        <DataGrid x:Name="dt_Display"  HorizontalAlignment="Left" Height="189" Margin="39,220,0,0" VerticalAlignment="Top" Width="711"/>
        <Button x:Name="btn_Display" Content="Display" HorizontalAlignment="Left" Margin="487,189,0,0" VerticalAlignment="Top" Width="75" Click="Btn_Display_Click"/>
        <Label x:Name="lbl_ID" Content="ProductID" HorizontalAlignment="Left" Margin="53,9,0,0" VerticalAlignment="Top" Width="84" FontSize="14"/>
        <TextBox x:Name="txt_Pid" HorizontalAlignment="Left" Height="23" Margin="227,9,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" Width="183" FontSize="14"/>

    </Grid>
</Window>
-----------------
using RBA_DataAccessLayer;
using RBA_Entities;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using RBA_BusinessAccessLayer;
using RBA_Exceptions;

namespace MainWindow
{
    /// <summary>
    /// Interaction logic for AddWindow.xaml
    /// </summary>
    public partial class AddWindow : Window
    {
        string connStr = ConfigurationManager.ConnectionStrings["ConStr"].ToString();
        SqlConnection conObj = new SqlConnection();
        SqlCommand cmdObj;
        SqlParameter parmObj;
        SqlDataReader rdrStudent = null;
        DataTable dtStudent = new DataTable();

        public AddWindow()
        {
            InitializeComponent();
        }

        private void Btn_Insert_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Entity p = new Entity
            {
                ProductName = txt_Pname.Text,
                Description= txt_Desc.Text,
                UnitPrice = decimal.Parse(txt_Price.Text)
            };

            Class1 pb = new Class1 ();
            int pid = pb.AddProductBAL(p);
            MessageBox.Show(string.Format("New Product Added.\nProduct Id: {0}", pid),
                "Product Management System");
        }
            catch (ProductException ex)
            {
                MessageBox.Show(ex.Message, "Product Management System");
            }
            catch (SystemException ex)
            {
                MessageBox.Show(ex.Message, "Product Management System");
            }
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            conObj.ConnectionString = connStr;
            cmdObj = new SqlCommand("select IDENT_CURRENT('vijayk_168464.Product')+IDENT_INCR('vijayk_168464.Product')", conObj);
            try
            {
                conObj.Open();
                object nxId = cmdObj.ExecuteScalar();
                txt_Pid.Text = nxId.ToString();



            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {
                conObj.Close();
            }


        }

        private void Btn_Display_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Class1 st = new Class1();
                DataTable dt = st.DisplayProductBal();
                dt_Display.ItemsSource = dt.DefaultView;


            }
            catch (ProductException ex)
            {
                MessageBox.Show(ex.Message, "employee Management System");
            }
            catch (SqlException se)
            {

                MessageBox.Show(se.Message.ToString());
            }
            finally
            {

            }

        }
        private void Dg_display_Scroll(object sender, System.Windows.Controls.Primitives.ScrollEventArgs e)
        {

        }
    }
    }
    

-------------------------------------------------
using RBA_DataAccessLayer;
using RBA_Entities;
using RBA_Exceptions;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace RBA_BusinessAccessLayer
{
    public class Class1
    {
        StringBuilder sb = new StringBuilder();
        private bool ValidateProduct(Entity pro)
        {


            bool IsValidProduct = true;

            if (!Regex.Match(pro.ProductName, @"^[A-Z][a-z]*$").Success)
            {
                IsValidProduct = false;
                sb.Append(Environment.NewLine + "Product Name should contain Characters and must begin with a capital letter!");
            }
            if (!(Regex.IsMatch(pro.UnitPrice.ToString(), @"[0-9]$")))
            {
                IsValidProduct = false;
                sb.Append(Environment.NewLine + "Product Price must contain digits only");
            }
            if (pro.UnitPrice.ToString().Equals(string.Empty))
            {
                IsValidProduct = false;
                sb.Append("Product Price cannot be blank " + Environment.NewLine);

            }

            return IsValidProduct;
        }
        public DataTable DisplayProductBal()
        {
            try
            {
                ProductDal sd = new ProductDal();
                DataTable dtProduct = sd.DisplayProductDal();
                if (dtProduct.Rows.Count <= 0)
                {
                    throw new ProductException("No Student Available");
                }
                return dtProduct;
            }
            catch (ProductException se)
            { throw se; }
            catch (SqlException ex)
            { throw ex; }
            catch (Exception e)
            { throw e; }
        }
        public int AddProductBAL(Entity pobj)
        {
            try
            {
                int pid = 0;
                ProductDal pd = new ProductDal();
                if (ValidateProduct(pobj))
                {
                    pid = pd.AddProductDal(pobj);
                }
                else
                    throw new ProductException(sb.ToString());

                return pid;
            }
            catch (ProductException)
            {
                throw;
            }
        }
    }
}
-------------------------------------
using RBA_Entities;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using RBA_Exceptions;

namespace RBA_DataAccessLayer
{
    public class ProductDal
    {
        static string conStr = string.Empty;
        SqlConnection con = null;
        SqlCommand cmd = null;
        static ProductDal()
        {
            conStr = ConfigurationManager.ConnectionStrings["ConStr"].ConnectionString;
        }
        public ProductDal()
        {
            con = new SqlConnection(conStr);
        }
        public DataTable DisplayProductDal()
        {
            DataTable dt = null;


            try
            {

                // con = new SqlConnection();
                //con.ConnectionString = ConfigurationManager.ConnectionStrings["ConStr"].ConnectionString;
                cmd = new SqlCommand();
                cmd.CommandText = "vijayk_168464.uspDisplayproduct";
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;

                con.Open();
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.HasRows)
                {
                    dt = new DataTable();
                    dt.Load(dr);
                }
            }

            catch (SqlException)
            {
                throw;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (con.State == ConnectionState.Open)
                {
                    con.Close();
                }
            }
            return dt;
        }
        public int AddProductDal(Entity pboj)
        {
            int pid = 0;
            try
            {
                //con = new SqlConnection();
                //con.ConnectionString = conStr; 
                cmd = new SqlCommand();
                cmd.CommandText = "Vijayk_168464.uspAddProduct";
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@pId", SqlDbType.Int);
                cmd.Parameters["@pId"].Direction = ParameterDirection.Output;

                cmd.Parameters.AddWithValue("@pName", pboj.ProductName);
                cmd.Parameters.AddWithValue("@descp", pboj.Description);
                cmd.Parameters.AddWithValue("@up", pboj.UnitPrice);
               

                con.Open();
                int noOfRowsAffected = cmd.ExecuteNonQuery();
                pid = int.Parse(cmd.Parameters["@pId"].Value.ToString());
            }
            catch (ProductException) { throw; }
            catch (SqlException)
            {
                throw;
            }
            catch (SystemException)
            {
                throw;
            }
            finally
            {
                if (con.State == ConnectionState.Open)
                {
                    con.Close();
                }
            }
            return pid;
        }
    }
}


--------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RBA_Entities
{
    public class Entity
    {
        public int ProductId { get; set; }
        public string ProductName { get; set; }
        public string Description { get; set; }
        public decimal UnitPrice { get; set; }
    }
}
------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RBA_Exceptions
{
    public class ProductException :Exception
    {
        public ProductException() : base()
        {
        }

        public ProductException(string message) : base(message)
        {
        }

        public ProductException(string message, Exception innerException) : base(message, innerException)
        {
        }
    }
}
















































































































