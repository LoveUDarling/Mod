//////////////******Q1


SQL Table
===========
use Training_12Dec18_Bangalore

/*create Patient Table*/

create table Nepun.PatientDetails_168285(
patientId int identity(100,1),
dateLogin date,
firstName varchar(20),
lastName varchar(20),
gender char,//varchar//
patientAddress varchar(70),
city varchar(20),
patientState varchar(20),
pinCode varchar(6),
phoneNumber bigint)

select * from Nepun.PatientDetails_168285


/*Inserting Dummy records*/

insert into Nepun.PatientDetails_168285 values ('04/02/2019', 'Murali', 'Sharma', 'M', 'ECIL', 'Hyderabad', 'Telangana', '501301', '8096794215');
insert into Nepun.PatientDetails_168285 values ('04/02/2019', 'Anil', 'kumar', 'M', 'NavyMumbai', 'Mumbai', 'Maharashtra', '505555', '9554269872');
insert into Nepun.PatientDetails_168285 values ('04/02/2019', 'Nepun', 'Kumar', 'M', 'French Street', 'Navy Mumbai', 'Maharashtra', '505555', '9554269872');
insert into Nepun.PatientDetails_168285 values ('04/02/2019', 'Jai', 'Ram', 'M', 'Employ Street', 'White Field', 'Karnataka', '506496', '9546987872');
insert into Nepun.PatientDetails_168285 values ('04/02/2019', 'Harish', 'Raja', 'M', 'Pune', 'Pune', 'Maharashtra', '504655', '9554123985');






/*Stored Procedure for Adding Patients*/

go
create procedure Nepun.udp_insert_patientDetails(
	
	@dateLogin date,
	@firstName varchar(20),
	@lastName varchar(20),
	@gender char,//varchar//
	@patientAddress varchar(70),
	@city varchar(20),
    @patientState varchar(20),
	@pinCode varchar(6),
	@phoneNumber bigint
	)
	AS
BEGIN
Insert into Nepun.PatientDetails_168285( dateLogin,firstName,lastName,gender,patientAddress,city,patientState,pinCode,phoneNumber) values ( @dateLogin,@firstName,@lastName,@gender,@patientAddress,@city,@patientState,@pinCode,@phoneNumber);
END


/*Stored Procedure for Display Patient Details*/

go
create procedure Nepun.udp_disp_patientDetails
 
AS
BEGIN
select * from Nepun.PatientDetails_168285
END

exec Nepun.udp_disp_patientDetails




=========***Layered Architecture********/

Enitty
==========
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PMS_Entity
{
    public class Patient
    {
        public int PatientId { get; set; }
        public DateTime LoginTime { get; set; }
        public string  FistName { get; set; }
        public string LastName { get; set; }
        public char Gender { get; set; }//string//
        public string  Address { get; set; }
        public string City { get; set; }
        public string State { get; set; }
        public string PinCode { get; set; }
        public long PhoneNumber { get; set; }

    }
}


Exception
===========

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PMS_Exception
{
    public class PatientException : ApplicationException
    {

        //public PatientException(): base()
        //{
        //}

        public PatientException(string message): base(message)
        {
        }
        //public PatientException(string message, System.Exception innerException): base(message, innerException)
        //{
        //}

    }
}



DAL
====
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PMS_Entity;
using PMS_Exception;
using System.Data;
using System.Configuration;


namespace PMS_DAL
{
    public class PatientDAL
    {

        
            /// <summary>
            ///  Patient operations for ADD & DISPLAY PATIENTS RECORDS
            /// </summary>

            static string conStr = string.Empty;
            SqlConnection con = null;
            SqlCommand cmd = null;



            static PatientDAL()
            {
                conStr = ConfigurationManager.ConnectionStrings["ConStr"].ConnectionString;

            }

            public PatientDAL()
            {
                con = new SqlConnection(conStr);

            }

        public void AddPatientDAL(Patient pboj)
        {
            //int pid = 0;
            try
            {
                //con = new SqlConnection();
                //con.ConnectionString = conStr; 
                cmd = new SqlCommand("Nepun.udp_insert_patientDetails", con);

                //cmd.CommandText = "Nepun.udp_insert_patientDetails";
                //cmd.Connection = con;

                cmd.CommandType = CommandType.StoredProcedure;


                cmd.Parameters.AddWithValue("@dateLogin", pboj.LoginTime);
                cmd.Parameters.AddWithValue("@firstName", pboj.FistName);
                cmd.Parameters.AddWithValue("@lastName", pboj.LastName);
                cmd.Parameters.AddWithValue("@gender", pboj.Gender);
                cmd.Parameters.AddWithValue("@patientAddress", pboj.Address);
                cmd.Parameters.AddWithValue("@city", pboj.City);
                cmd.Parameters.AddWithValue("@patientState", pboj.State);
                cmd.Parameters.AddWithValue("@pinCode", pboj.PinCode);
                cmd.Parameters.AddWithValue("@phoneNumber", pboj.PhoneNumber);


                con.Open();
                int noOfRowsAffected = cmd.ExecuteNonQuery();
                //pid = int.Parse(cmd.Parameters["@pId"].Value.ToString());
            }
            catch (PatientException)
            {
                throw;
            }

            catch (SqlException)
            {
                throw;
            }

            //catch (SystemException)
            //{
            //    throw;
            //}

            finally
            {
                if (con.State == ConnectionState.Open)
                {
                    con.Close();
                }
            }
            //return pid;
        }


        public DataTable DisplayPatientDAL()
        {
            DataTable dt = null;
            try
            {
                cmd = new SqlCommand("Nepun.udp_disp_patientDetails", con);
                cmd.CommandType = CommandType.StoredProcedure;
                con.Open();
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.HasRows)
                {
                    dt = new DataTable();
                    dt.Load(dr);
                }

            }

            catch (SqlException)
            {
                throw;

            }

            catch (Exception)
            {

                throw;
            }
            finally
            {
                if (con.State == ConnectionState.Open)
                {
                    con.Close();
                }
            }

            return dt;
        }


    }
}



BAL
====

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using PMS_Entity;
using PMS_Exception;
using PMS_DAL;
using System.Configuration;
using System.Text.RegularExpressions;
using System.Data;
using System.Data.SqlClient;

namespace PMS_BAL
{
    public class PatientBAL
    {


        private bool ValidatePatient(Patient newPatient)
        {
            bool isValidpatient = true;
            StringBuilder sbPMSError = new StringBuilder();


            //if (!(Regex.IsMatch(newPatient.FistName, "[A-Z][a-z]{3,}")))
            //{
            //    isValidpatient = false;
            //    sbPMSError.Append("patient Name must have only characters starting with uppercase " + Environment.NewLine);
            //}


            if (!(Regex.IsMatch(newPatient.PhoneNumber.ToString(), "^[6-9][0-9]{9}$")))
            {
                isValidpatient = false;
                sbPMSError.Append("Patient contact should have 10 digits or First digit should be greater than 6" + Environment.NewLine);
            }

            //if (!(Regex.IsMatch(newPatient.PinCode.ToString(), "^{6,}$")))

            //{
            //    isValidpatient = false;
            //    sbPMSError.Append("PinCode should have 6 digits" + Environment.NewLine);

            //}

            //if (String.IsNullOrEmpty(newPatient.FistName))
            //{
            //    sbPMSError.Append("First Name Required" + Environment.NewLine);
            //}

            //if (String.IsNullOrEmpty(newPatient.LastName))
            //{
            //    sbPMSError.Append("Last Name Required" + Environment.NewLine);
            //}

            //if (String.IsNullOrEmpty(newPatient.Address))
            //{
            //    sbPMSError.Append("Address Required" + Environment.NewLine);
            //}

            //if (String.IsNullOrEmpty(newPatient.City))
            //{
            //    sbPMSError.Append("City Required" + Environment.NewLine);
            //}
            //if (String.IsNullOrEmpty(newPatient.State))
            //{
            //    sbPMSError.Append("State Required" + Environment.NewLine);
            //}
            //if (String.IsNullOrEmpty(newPatient.PinCode))
            //{
            //    sbPMSError.Append("Pin code Required" + Environment.NewLine);
            //}
            //if (String.IsNullOrEmpty(Convert.ToString(newPatient.PhoneNumber)))
            //{
            //    sbPMSError.Append("Phone Number Required" + Environment.NewLine);
            //}


            if (!isValidpatient)

            { throw new PatientException(sbPMSError.ToString()); }

            return isValidpatient;
        }




        public void AddPatientBAL(Patient pobj)
        {
            try
            {

                if (ValidatePatient(pobj))
                {
                    PatientDAL pd = new PatientDAL();
                    pd.AddPatientDAL(pobj);
                }
                else
                {
                    throw new PatientException("Failed to Add Patient");
                }

            }

            catch (PatientException)
            {
                throw;
            }

        }


        public DataTable DisplayPatientBAL()
        {
            PatientDAL st = new PatientDAL();
            DataTable dtpatient = st.DisplayPatientDAL();

            try
            {
                if (dtpatient.Rows.Count <= 0)
                {
                    throw new PatientException("No Patient Available");
                }

            }
            catch (PatientException pe)
            {
                throw pe;

            }
            catch (SqlException se)
            {

                throw se;
            }
            return dtpatient;
        }


    }
}






Presebtation Layer
=====================


ADD Patient .xaml
=======================
<Window x:Class="PMS_UI.PatientRegistrationForm"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PMS_UI"
        mc:Ignorable="d"
        Title="PatientRegistrationForm" Height="450" Width="800" Loaded="Window_Loaded" Background="LightSeaGreen">
    <Grid>
        <TextBlock x:Name="tb_ID" HorizontalAlignment="Left" Margin="702,14,0,0" TextWrappin.g="Wrap"   Text="PatientId" VerticalAlignment="Top"/>
        <TextBlock x:Name="tb_Login" HorizontalAlignment="Left" Margin="24,18,0,0" TextWrapping="Wrap" Text="Login" VerticalAlignment="Top"/>
        <Label Content="First Name" HorizontalAlignment="Left" Margin="24,49,0,0" VerticalAlignment="Top" Width="83"/>
        <TextBox x:Name="txt_FirstName" HorizontalAlignment="Left" Height="26" Margin="157,49,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" Width="120"/>
        <Label Content="Last Name" HorizontalAlignment="Left" Margin="334,49,0,0" VerticalAlignment="Top" Width="86" Height="26"/>
        <TextBox x:Name="txt_LastName" HorizontalAlignment="Left" Height="27" Margin="501,49,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="120"/>
        <Label Content="Gender" HorizontalAlignment="Left" Margin="24,87,0,0" VerticalAlignment="Top" Width="64"/>
        <RadioButton x:Name="rbtn_Male" GroupName="gender" Content="M" HorizontalAlignment="Left" Margin="157,98,0,0" VerticalAlignment="Top" Width="74" Height="15"/>
        <Label Content="Address" HorizontalAlignment="Left" Margin="24,126,0,0" VerticalAlignment="Top" Width="64"/>
        <TextBox x:Name="txt_Address" HorizontalAlignment="Left" Height="60" Margin="157,135,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" Width="273" />
        <Label Content="City" HorizontalAlignment="Left" Margin="24,218,0,0" VerticalAlignment="Top" Width="64"/>
        <TextBox x:Name="txt_City" HorizontalAlignment="Left" Height="23" Margin="157,221,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" Width="235" />
        <Label Content="State" HorizontalAlignment="Left" Margin="24,257,0,0" VerticalAlignment="Top" Height="23" Width="64"/>
        <TextBox x:Name="txt_State" HorizontalAlignment="Left" Height="23" Margin="157,257,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" Width="481"/>
        <Label Content="Pin Code" HorizontalAlignment="Left" Margin="24,301,0,0" VerticalAlignment="Top" Height="25" Width="64"/>
        <TextBox x:Name="txt_PinCode" HorizontalAlignment="Left" Height="23" Margin="157,301,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" Width="481"  />
        <Label Content="Phone Number" HorizontalAlignment="Left" Margin="17,345,0,0" VerticalAlignment="Top" Height="25"/>
        <TextBox x:Name="txt_Phone" HorizontalAlignment="Left" Height="23" Margin="157,347,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" Width="481"/>
        <Button x:Name="btn_AddPatient" Content="Submit" HorizontalAlignment="Left" Margin="515,384,0,0" VerticalAlignment="Top" Width="92" Click="Btn_AddPatient_Click" Height="25"/>
        <RadioButton x:Name="rbtn_Female" Content="F" HorizontalAlignment="Left" Margin="278,98,0,0" VerticalAlignment="Top" Height="15" Width="63"/>

    </Grid>
</Window>




ADD patient.xaml.cs
===================
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Data;
using PMS_Entity;
using PMS_Exception;
using PMS_BAL;

namespace PMS_UI
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class PatientRegistrationForm : Window
    {

        string connStr = ConfigurationManager.ConnectionStrings["ConStr"].ToString();
        SqlConnection conObj = new SqlConnection();
        SqlCommand cmdObj;



        public PatientRegistrationForm()
        {
            InitializeComponent();
        }



        //window loaded for loading Date & Patient ID
        
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {

            conObj.ConnectionString = connStr;
            cmdObj = new SqlCommand("select ident_current('Nepun.PatientDetails_168285') + ident_incr('Nepun.PatientDetails_168285')", conObj);
            try
            {
                DateTime date1 = new DateTime();
                date1 = DateTime.Now;
                tb_Login.Text = date1.ToString();
                conObj.Open();
                object nxId = cmdObj.ExecuteScalar();
                //int nxtId = Convert.ToInt32(nxId);
                tb_ID.Text = nxId.ToString();

            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {
                conObj.Close();
            }


        }

        //Adding Patient Details

        private void Btn_AddPatient_Click(object sender, RoutedEventArgs e)
        {

            try
            {

             
                string GE = " ";

 
                if (rbtn_Male.IsChecked == true)
                    GE = rbtn_Male.Content.ToString();

                else if (rbtn_Female.IsChecked == true)
                    GE = rbtn_Female.Content.ToString();

                DateTime date1 = new DateTime();
                date1 = DateTime.Now;

                Patient p = new Patient
                {
                    LoginTime = DateTime.Parse(tb_Login.Text),
                    PatientId = int.Parse(tb_ID.Text),
                    FistName = txt_FirstName.Text,
                    LastName = txt_LastName.Text,
                    Gender = char.Parse(GE),//convert.ToString(GE)//
                    Address = txt_Address.Text,
                    City = txt_City.Text,
                    State = txt_State.Text,
                    PinCode = txt_PinCode.Text,
                    PhoneNumber = long.Parse(txt_Phone.Text)


                };
                PatientBAL pb = new PatientBAL();
                pb.AddPatientBAL(p);
                MessageBox.Show(string.Format("New Patient Added", "Patient Management System"));
            }
            catch (PatientException ex)
            {
                MessageBox.Show(ex.Message, "Patient Management System");
            }
            catch (SystemException ex)
            {
                MessageBox.Show(ex.Message, "Patient Management System");
            }


        }

       
    }
}


DISPLAY.xaml
==============
<Window x:Class="PMS_UI.DisplayPatientRecords"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PMS_UI"
        mc:Ignorable="d"
        Title="DisplayPatientRecords" Height="450" Width="800">
    <Grid>
        <DataGrid x:Name="dg_Display" HorizontalAlignment="Left" Height="187" Margin="82,61,0,0" VerticalAlignment="Top" Width="539"/>
        <Button x:Name="btn_Display" Content="DISPLAY" HorizontalAlignment="Left" Margin="229,310,0,0" VerticalAlignment="Top" Width="215" Height="42" Click="Btn_Display_Click"/>

    </Grid>
</Window>



DISPLAY.xaml.cs
===============
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Data;
using System.Data.SqlClient;
using PMS_BAL;
using PMS_Entity;
using PMS_Exception;
using System.Configuration;

namespace PMS_UI
{
    /// <summary>
    /// Interaction logic for DisplayPatientRecords.xaml
    /// </summary>
    public partial class DisplayPatientRecords : Window
    {
        public DisplayPatientRecords()
        {
            InitializeComponent();
        }



        //Button for Displaying PAtient Records

        private void Btn_Display_Click(object sender, RoutedEventArgs e)
        {

            try
            {
                PatientBAL st = new PatientBAL();
                DataTable dt = st.DisplayPatientBAL();
                dg_Display.ItemsSource = dt.DefaultView;


            }
            catch (PatientException ex)
            {
                MessageBox.Show(ex.Message, "Patient Management System");
            }
            catch (SqlException se)
            {

                MessageBox.Show(se.Message.ToString());
            }
            finally
            {

            }

        }
    }
}




=====================================================================================================

///////////////////////////////


==========****Q2************////////
Q2==>>Display patient recored using entity f/w



DISPLAY.xaml
=============
<Window x:Class="Q2_PatientRecords_EF.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Q2_PatientRecords_EF"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">

    <Window.Resources>


        <Style x:Key = "TriggerStyle" TargetType = "Button">
            <Setter Property = "Opacity" Value = "0.5" />
            <Style.Triggers>
                <Trigger Property = "IsMouseOver" Value = "True">
                    <Setter Property = "Opacity" Value = "1" />
                    <Setter Property="Foreground" Value="Red"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key ="styling1" TargetType="DataGrid">
            <Setter Property="Background" Value="LightBlue"></Setter>
        </Style>

    </Window.Resources>

    <Window.Background>
        <LinearGradientBrush StartPoint="0,3" EndPoint="2,2">
            <GradientStop Color="Red" Offset="0.2" />
            <GradientStop Color="Green" Offset="0.25" />
            <GradientStop Color="Blue" Offset="0.75" />

        </LinearGradientBrush>
    </Window.Background>



    <Grid>
        <DataGrid Style="{StaticResource styling1}" x:Name="dg_Display" HorizontalAlignment="Left" Height="160" Margin="56,56,0,0" VerticalAlignment="Top" Width="685"/>
        <Button Style = "{StaticResource TriggerStyle}" Content="DISPLAY ALL PATIENT RECORDS" HorizontalAlignment="Left" Margin="309,280,0,0" VerticalAlignment="Top" Width="201" Click="Button_Click" Height="35"/>

    </Grid>
</Window>




DISPLAY.xaml.cs
==================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Q2_PatientRecords_EF
{
    /// <summary>
    /// Displaying Patients Information
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }


        //Button Event to click for  Displaying Patients Information

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                //creating context object
                Training_12Dec18_BangaloreEntities contextObj = new Training_12Dec18_BangaloreEntities();
                PatientDetails_168285 newpatient = new PatientDetails_168285();

                var patientQuery = from PatientDetails_168285 p in contextObj.PatientDetails_168285
                               where p.patientState == "Maharashtra"
                               select p;
                if (patientQuery.Count() > 0)
                {
                    dg_Display.ItemsSource = patientQuery.ToList<PatientDetails_168285>();
                }

                else
                {
                    MessageBox.Show("NO Records");
                }
            }

            catch (Exception ex)
            {

                MessageBox.Show(ex.Message, "Patient Management System");
            }

        }
    }
}



