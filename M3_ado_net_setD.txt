//////////***ADO.net*********/

==========>>>==Q1--layered architecture

SQL table
======

use Training_12Dec18_Bangalore

create table Mahender.CustomerWPF
(
CustomerID int identity(100,1) primary key,
CustomerName varchar(50) not null unique,
City varchar(20) not null,
Country varchar(20) not null
)

create proc Mahender.udpAddCustomer
(
@customerName varchar(50),
@city varchar(20),
@country varchar(20),
@customerID int output
)
as
begin
	insert into Mahender.CustomerWPF
	values(@customerName,@city,@country)
	set @customerID = Scope_Identity()
end

--SET IDENTITY_INSERT Mahender.CustomerWPF OFF

create proc Mahender.udpGetCustomers
as
begin
	select * from Mahender.CustomerWPF
end

create proc Mahender.uspNextCustomerId
as
begin
select IDENT_CURRENT('Mahender.CustomerWPF') +IDENT_Incr('Mahender.CustomerWPF') 
end

insert into Mahender.CustomerWPF 
values ('Rafaella','Pune','India')

insert into Mahender.CustomerWPF 
values ('Nirmala Sitharaman','Chennai','India')

select * from Mahender.CustomerWPF



==========

Layered Architecture 


=====>>

Entity
=======
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CMS_Entity
{
    //The Entity Class
    public class Customer
    {
        public int CustomerId { get; set; }
        public string  CustomerName { get; set; }
        public string City { get; set; }
        public string Country { get; set; }
    }
}


Exception
=========
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CMS_Exception
{
    public class Cust_Exception:ApplicationException
    {
        public Cust_Exception(string Message):base(Message)
        {

        }
    }
}



DAL
====

using CMS_Entity;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CMS_DAL
{
    public class CustomerOperations
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="pboj"></param>
        /// <returns></returns>
        static string conStr = string.Empty;
        SqlConnection con = null;
        SqlCommand cmd = null;
        //using static constructor to load connection string
        static CustomerOperations()
        {
            conStr = ConfigurationManager.ConnectionStrings["ConStr"].ConnectionString;
        }
        //creating a object for the opened connection
        public CustomerOperations()
        {
            con = new SqlConnection(conStr);
        }
        //method for displaying customer
        public DataTable DisplayCustomer_DAL()
        {
            DataTable dt = null;

            try
            {
                cmd = new SqlCommand("Mahender.udpGetCustomers", con);//stored procedure for displaying customers
                cmd.CommandType = CommandType.StoredProcedure;
                con.Open();
                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.HasRows)
                {
                    dt = new DataTable();
                    dt.Load(dr);
                }
            }
            catch (SqlException)
            {
                throw;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (con.State == ConnectionState.Open)
                {
                    con.Close();
                }
            }
            return dt;
        }
        //method for adding customer
        public int AddCustomer_DAL(Customer seobj)
        {
            int cid = 0;
            try
            {
                cmd = new SqlCommand();
                cmd.CommandText = "Mahender.udpAddCustomer";//stored procedure for adding customer
                cmd.Connection = con;
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@customerID", SqlDbType.Int);
                cmd.Parameters["@customerID"].Direction = ParameterDirection.Output;//getting the auto incremented id from db

                cmd.Parameters.AddWithValue("@customerName", seobj.CustomerName);
                cmd.Parameters.AddWithValue("@city", seobj.City);
                cmd.Parameters.AddWithValue("@country", seobj.Country);
                con.Open();
                int noOfRowsAffected = cmd.ExecuteNonQuery();
                cid = int.Parse(cmd.Parameters["@customerID"].Value.ToString());
            }

            catch (SqlException)
            {
                throw;
            }
            catch (Exception)
            {
                throw;
            }
            finally
            {
                if (con.State == ConnectionState.Open)
                {
                    con.Close();
                }
            }
            return cid;//returning the id to display in the form
        }
    }
}





BAL
====
using CMS_DAL;
using CMS_Entity;
using CMS_Exception;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace CMS_BLL
{
    public class CustomerValidations
    {
        private bool ValidateCustomer(Customer newCustomer)
        {
            bool isValidCustomer = true;
            StringBuilder sbClientError = new StringBuilder();
            if (newCustomer.CustomerName.Equals(string.Empty))//validation for blank name
            {
                isValidCustomer = false;
                sbClientError.Append("Who the hell has name blank!!:)" + Environment.NewLine);
            }
            //validation for blank city name
            if (newCustomer.City.Equals(string.Empty))
            {
                isValidCustomer = false;
                sbClientError.Append("City is  blank!!:)" + Environment.NewLine);
            }
            //validation for blank country
            if (newCustomer.Country.Equals(string.Empty))
            {
                isValidCustomer = false;
                sbClientError.Append("Country is  blank!!:)" + Environment.NewLine);
            }
            if (!isValidCustomer)
            {
                throw new Cust_Exception(sbClientError.ToString());
            }
            return isValidCustomer;
        }
        public DataTable DisplayCustomer_BLL()
        {
            try
            {
                CustomerOperations co = new CustomerOperations();
                return co.DisplayCustomer_DAL();//using display mehtod from DAL
            }
            catch (Cust_Exception c)//catching custom exception
            {
                throw c;
            }
            catch (SqlException se)//catching sql exception
            {
                throw se;
            }
            catch (Exception e)
            {
                throw e;
            }
        }
        public int AddCustomer_BLL(Customer seobj)
        {
            int cid = 0;
            try
            {
                CustomerOperations co = new CustomerOperations();
                if (ValidateCustomer(seobj))
                {
                    cid = co.AddCustomer_DAL(seobj);//using add method from DAl
                }
                else throw new Cust_Exception("Failed to Add Customer");
                return cid;
            }
            catch (Cust_Exception c)
            {
                throw c;
            }
            catch (SqlException pe)
            {
                throw pe;
            }
            catch (Exception pe)
            {
                throw pe;
            }
        }
    }
}



Presentation Layer
=====================


ADD Window.xaml
=============
<Window x:Class="CMS_Presentation.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:CMS_Presentation"
        mc:Ignorable="d"
        Title="Customer Information System" Height="450" Width="800" Loaded="Window_Loaded">
    <Grid>
        <Label x:Name="lblID" Content="Customer Id" HorizontalAlignment="Left" Margin="101,81,0,0" VerticalAlignment="Top"/>
        <Label x:Name="lblName" Content="Customer Name" HorizontalAlignment="Left" Margin="101,152,0,0" VerticalAlignment="Top"/>
        <Label x:Name="lblCity" Content="City" HorizontalAlignment="Left" Margin="101,227,0,0" VerticalAlignment="Top"/>
        <Label x:Name="lblCountry" Content="Country" HorizontalAlignment="Left" Margin="101,293,0,0" VerticalAlignment="Top"/>
        <TextBox x:Name="txtId" HorizontalAlignment="Left" Height="23" Margin="256,84,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" Width="120"/>
        <TextBox x:Name="txtName" HorizontalAlignment="Left" Height="23" Margin="256,152,0,0" TextWrapping="Wrap"  VerticalAlignment="Top" Width="120"/>
        <Button x:Name="btnSave" Content="Save" HorizontalAlignment="Left" Margin="122,354,0,0" VerticalAlignment="Top" Width="75" Click="BtnSave_Click"/>
        <Button x:Name="btnDisplay" Content="Display" HorizontalAlignment="Left" Margin="256,354,0,0" VerticalAlignment="Top" Width="75" Click="BtnDisplay_Click"/>
        <ComboBox x:Name="cbCity" HorizontalAlignment="Left" Margin="256,227,0,0" VerticalAlignment="Top" Width="120">
            <ComboBoxItem>Mumbai</ComboBoxItem>
            <ComboBoxItem>Chennai</ComboBoxItem>
            <ComboBoxItem>Bangalore</ComboBoxItem>
            <ComboBoxItem>Pune</ComboBoxItem>
        </ComboBox>
        <ComboBox x:Name="cbCountry" HorizontalAlignment="Left" Margin="256,293,0,0" VerticalAlignment="Top" Width="120">
            <ComboBoxItem>India</ComboBoxItem>
            <ComboBoxItem>UK</ComboBoxItem>
            <ComboBoxItem>USA</ComboBoxItem>
            <ComboBoxItem>France</ComboBoxItem>
        </ComboBox>

    </Grid>
</Window>




ADD window.xaml.cs
====================
using CMS_BLL;
using CMS_Entity;
using CMS_Exception;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace CMS_Presentation
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {

        string connStr = ConfigurationManager.ConnectionStrings["ConStr"].ToString();
        SqlConnection conObj = new SqlConnection();
        SqlCommand cmdObj;
        DataTable dtStudent = new DataTable();
        public MainWindow()
        {
            InitializeComponent();
        }

        //Displaying Auto incremented ID using Window Loaded event
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            conObj.ConnectionString = connStr;
            //executing cmd for auto incremented ID
            cmdObj = new SqlCommand("select ident_current('Mahender.CustomerWPF') + ident_incr('Mahender.CustomerWPF')", conObj);
            try
            {
                conObj.Open();
                object nxId = cmdObj.ExecuteScalar();//storing the auto incremented ID 
                txtId.Text = nxId.ToString();//displaying it in text box

            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {
                conObj.Close();
            }
        }
        //Save button click event
        private void BtnSave_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                Customer c = new Customer
                {
                    CustomerName = txtName.Text,
                    City = cbCity.Text,
                    Country = cbCountry.Text
                };
                CustomerValidations cv = new CustomerValidations();
                int cid = cv.AddCustomer_BLL(c);
                MessageBox.Show(string.Format("New Custmer Added.\nCustomer Id: {0}", cid),
                    "Customer Information System");
                MainWindow mainWindow = new MainWindow();//creating a object for main window
                mainWindow.Show();//showing the new Main Window so we can add next customer and the previous customer details cannot be seen
                Close();//closing the present window
            }
            catch (Cust_Exception ex)
            {
                MessageBox.Show(ex.Message, "Customer Information System");
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message, "Customer Information System");
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Customer Information System");
            }
        }
        //Display button Click event
        private void BtnDisplay_Click(object sender, RoutedEventArgs e)
        {
            Display newWindow = new Display();
            newWindow.Show();//This will take the control to Display Window
        }
    }
}



Display.xaml
============
<Window x:Class="CMS_Presentation.Display"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:CMS_Presentation"
        mc:Ignorable="d"
        Title="Display" Height="450" Width="800" Loaded="Window_Loaded">
    <Grid>
        <DataGrid x:Name="dgCustomer" HorizontalAlignment="Left" Height="299" Margin="70,71,0,0" VerticalAlignment="Top" Width="667"/>

    </Grid>
</Window>


Display.xaml.cs
==============
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using CMS_BLL;
using CMS_Entity;
using CMS_Exception;

namespace CMS_Presentation
{
    /// <summary>
    /// Interaction logic for Display.xaml
    /// </summary>
    public partial class Display : Window
    {
        public Display()
        {
            InitializeComponent();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            try
            {
                CustomerValidations cv = new CustomerValidations();
                DataTable dt = cv.DisplayCustomer_BLL();
                if (dt != null)
                {
                    dgCustomer.ItemsSource = dt.DefaultView;
                }
                else
                {
                    MessageBox.Show("Table is empty", "Customer Information System");
                }
            }
            catch (Cust_Exception ex)
            {
                MessageBox.Show(ex.Message, "Customer Information System");
            }
            catch (SystemException ex)
            {
                MessageBox.Show(ex.Message, "Customer Information System");
            }
        }
    }
}


=====================================================================================================================
///////////////////////////////////////////////////////

===========>>>Q2
Display records using Entity f/w (Data Base First Approach)

Display.xaml
===========
<Window x:Class="DbFirstApproach.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DbFirstApproach"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800" Loaded="Window_Loaded">
    <Window.Resources>
        <Style x:Key="DGFont">
            <Setter Property="Control.FontFamily" Value="Sans" />
            <Setter Property="Control.FontSize" Value="18" />
            <Setter Property="Control.FontWeight" Value="UltraBold" />
            <Setter Property="Control.Foreground" Value="Red" />
            <Setter Property="Control.Background" Value="Green" />
        </Style>
    </Window.Resources>
    <Grid>
        <DataGrid Style="{StaticResource DGFont}" x:Name="dgEmployee" HorizontalAlignment="Left" Height="303" Margin="65,80,0,0" VerticalAlignment="Top" Width="662"/>

    </Grid>
</Window>




Display.xaml.cs
===============
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace DbFirstApproach
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            Training_12Dec18_BangaloreEntities contextObj = new Training_12Dec18_BangaloreEntities();
            CustomerWPF newCustomer = new CustomerWPF();
            //query for displaying employees in India and working in Bangalore and ordering them by Customer ID
            var searchQuery = from cust in contextObj.CustomerWPFs
                              where cust.Country == "India" && cust.City == "Mumbai" orderby cust.CustomerID descending
                              select cust;

            if (searchQuery.Count() > 0)//if employee found display
            {
                  dgEmployee.ItemsSource = searchQuery.ToList<CustomerWPF>();
                MessageBox.Show(string.Format("Customer Found" + "\n" + newCustomer.CustomerName, newCustomer.CustomerID.ToString()), "Customer Information System");
            }
            else//will show no customer found
            {
                MessageBox.Show("Customer Not Found");
            }
        }
    }
}

